# Sysctl Configuration
#
# Sysctl is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config sysctl.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for sysctl agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## sysctl will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that sysctl sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, sysctl will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of sysctl instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  ## Valid values are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run sysctl with debug log messages.
  debug = false
  ## Run sysctl in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the sysctl agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

[[outputs.sysctl]]
   url_path = "http://localhost:8181/publishEvent"
   building_block = "datacenter1"
   tenant = "ING"

## Data format to output.
## Each data format has it's own unique set of configuration options, read
## more about them here:
## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md

[[outputs.file]]
  ## Files to write to, "stdout" is a specially handled file.
  files = ["stdout", "/tmp/metrics.out"]

###############################################################################
#                            PROCESSOR PLUGINS                                #
###############################################################################

# # Print all metrics that pass through this filter.
# [[processors.printer]]



###############################################################################
#                            AGGREGATOR PLUGINS                               #
###############################################################################

# # Keep the aggregate min/max of each metric passing through.
# [[aggregators.minmax]]
#   ## General Aggregator Arguments:
#   ## The period on which to flush & clear the aggregator.
#   period = "30s"
#   ## If true, the original metric will be dropped by the
#   ## aggregator and will not get sent to the output plugins.
#   drop_original = false



###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

[[inputs.sysheartbeat]]
  get_all_pid_url = "http://localhost:7782/vm"
  get_by_pid_url = "http://localhost:7782/vm/{id}/stats"
  pid_filters = [ "eclipse" , "gradle", "tomcat"]


##Read metrics about cpu usage
[[inputs.cpu]]
 ## Whether to report per-cpu stats or not
 percpu = true
 ## Whether to report total system cpu stats or not
 totalcpu = true
 ## If true, collect raw CPU time metrics.
 collect_cpu_time = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
 ## By default, sysctl gather stats for all mountpoints.
 ## Setting mountpoints will restrict the stats to the specified mountpoints.
 # mount_points = ["/"]

 ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
 ## present on /run, /var/run, /dev/shm or /dev).
 ignore_fs = ["tmpfs", "devtmpfs", "devfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
 ## By default, sysctl will gather stats for all devices including
 ## disk partitions.
 ## Setting devices will restrict the stats to the specified devices.
 # devices = ["sda", "sdb"]
 ## Uncomment the following line if you need disk serial numbers.
 # skip_serial_number = false
 #
 ## On systems which support it, device metadata can be added in the form of
 ## tags.
 ## Currently only Linux is supported via udev properties. You can view
 ## available properties for a device by running:
 ## 'udevadm info -q property -n /dev/sda'
 # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
 #
 ## Using the same metadata source as device_tags, you can also customize the
 ## name of the device via templates.
 ## The 'name_templates' parameter is a list of templates to try and apply to
 ## the device. The template may contain variables in the form of '$PROPERTY' or
 ## '${PROPERTY}'. The first template which does not contain any variables not
 ## present for the device is used as the device name tag.
 ## The typical use case is for LVM volumes, to get the VG/LV name instead of
 ## the near-meaningless DM-0 name.
 # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
 # no configuration


# Read metrics about memory usage
[[inputs.mem]]
 # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
 # no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
 # no configuration


# Read metrics about system load & uptime
[[inputs.system]]
 # no configuration

 ## Collect statistics about itself
[[inputs.internal]]
 ### If true, collect sysctl memory stats.
  collect_memstats = true

## Read metrics about network interface usage
[[inputs.net]]
## By default, sysctl gathers stats from any up interface (excluding loopback)
## Setting interfaces will tell it to gather these explicit interfaces,
## regardless of status.
##
# interfaces = ["eth0"]

[[inputs.net_response]]
  ## Protocol, must be "tcp" or "udp"
  ## NOTE: because the "udp" protocol does not respond to requests, it requires
  ## a send/expect string pair (see below).
  protocol = "tcp"
  ## Server address (default localhost)
  address = "localhost:8181"
  ## Set timeout
  timeout = "1s"
  ## Set read timeout (only used if expecting a response)
  read_timeout = "1s"

[[inputs.netstat]]
  #   # no configuration

[[inputs.nstat]]
  ## file paths for proc files. If empty default paths will be used:
  ##    /proc/net/netstat, /proc/net/snmp, /proc/net/snmp6
  ## These can also be overridden with env variables, see README.
  #   proc_net_netstat = "/proc/net/netstat"
  #   proc_net_snmp = "/proc/net/snmp"
  #   proc_net_snmp6 = "/proc/net/snmp6"
  #   ## dump metrics with 0 values too
  dump_zeros       = true

  ## Ping given url(s) and return statistics
[[inputs.ping]]
  ## NOTE: this plugin forks the ping command. You may need to set capabilities
  ## via setcap cap_net_raw+p /bin/ping
  #   ## List of urls to ping
  urls = ["127.0.0.1"] # required
  ## number of pings to send per collection (ping -c <COUNT>)
  count = 1
  ## interval, in s, at which to ping. 0 == default (ping -i <PING_INTERVAL>)
  ping_interval = 1.0
  ## per-ping timeout, in s. 0 == no timeout (ping -W <TIMEOUT>)
  timeout = 1.0
  #   ## interface to send ping from (ping -I <INTERFACE>)
  #   # interface = ""
